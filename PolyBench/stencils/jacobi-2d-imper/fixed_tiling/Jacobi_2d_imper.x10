/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2015.
 * 
 *
 *  @author HUANG RUOCHEN (hrc706@gmail.com)
 */

import x10.compiler.Ifdef;
import x10.array.Array_2;
import x10.array.Array_3;
import x10.compiler.Foreach;
public class Jacobi_2d_imper {

  var _PB_TSTEPS : Long;
  var _PB_N : Long;

  def setPBs(tsteps : Long, n : Long) {
    _PB_TSTEPS = tsteps; 
    _PB_N = n; 
  }
  def init_array(n : Long,
  		 A : Array_2[Double],
  		 B : Array_2[Double])
  {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++)
        {
  	A(i,j) = ((i as Double)*(j+2) + 2) / n;
  	B(i,j) = ((i as Double)*(j+3) + 3) / n;
        }
  }  /* DCE code. Must scan the entire live-out data.
     Can be used also to check the correctness of the output. */
  def print_array(n : Long,
  		 A : Array_2[Double])
  
  {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++) {
        Console.ERR.printf("%0.2lf ", A(i,j));
        if ((i * n + j) % 20 == 0) Console.ERR.printf("\n");
      }
    Console.ERR.printf("\n");
  }  /* Main computational kernel. The whole function will be timed,
     including the call and return. */
    def kernel_jacobi_2d_imper(tsteps : long, n : long, A : Array_2[double], B : Array_2[double])  {
        var c3 : long;
        var c0 : long;
        var c4 : long;
        var c5 : long;
        var c2 : long;
        var c1 : long;
        if (((n >= 3) && (tsteps >= 1))) {
            for (c0 = 0; (c0 <= (((n + (3 * tsteps)) + -4) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (3 * tsteps)) + -4)) + 256 + 1) / 256) :  -(( -(((n + (3 * tsteps)) + -4)) + 256 - 1) / 256)) : ((n + (3 * tsteps)) + -4) / 256)); c0++) {
                {
                    val c0_0 = c0;
                    Foreach.block((((2 * c0_0) * 3 < 0 ?  -( -((2 * c0_0)) / 3) : (3 < 0 ? ( -((2 * c0_0)) +  -(3) - 1) /  -(3) : ((2 * c0_0) + 3 - 1) / 3)) > ((((256 * c0_0) + (-1 * tsteps)) + 1) * 256 < 0 ?  -( -((((256 * c0_0) + (-1 * tsteps)) + 1)) / 256) : (256 < 0 ? ( -((((256 * c0_0) + (-1 * tsteps)) + 1)) +  -(256) - 1) /  -(256) : ((((256 * c0_0) + (-1 * tsteps)) + 1) + 256 - 1) / 256)) ? (((2 * c0_0) * 3 < 0 ?  -( -((2 * c0_0)) / 3) : (3 < 0 ? ( -((2 * c0_0)) +  -(3) - 1) /  -(3) : ((2 * c0_0) + 3 - 1) / 3))) as long : (((((256 * c0_0) + (-1 * tsteps)) + 1) * 256 < 0 ?  -( -((((256 * c0_0) + (-1 * tsteps)) + 1)) / 256) : (256 < 0 ? ( -((((256 * c0_0) + (-1 * tsteps)) + 1)) +  -(256) - 1) /  -(256) : ((((256 * c0_0) + (-1 * tsteps)) + 1) + 256 - 1) / 256))) as long),(((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256) < ((((64 * c0_0) + n) + 61) * 96 < 0 ? (96 < 0 ?  -(( -((((64 * c0_0) + n) + 61)) + 96 + 1) / 96) :  -(( -((((64 * c0_0) + n) + 61)) + 96 - 1) / 96)) : (((64 * c0_0) + n) + 61) / 96) ? ((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256)) as long : (((((64 * c0_0) + n) + 61) * 96 < 0 ? (96 < 0 ?  -(( -((((64 * c0_0) + n) + 61)) + 96 + 1) / 96) :  -(( -((((64 * c0_0) + n) + 61)) + 96 - 1) / 96)) : (((64 * c0_0) + n) + 61) / 96)) as long) < c0_0 ? (((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256) < ((((64 * c0_0) + n) + 61) * 96 < 0 ? (96 < 0 ?  -(( -((((64 * c0_0) + n) + 61)) + 96 + 1) / 96) :  -(( -((((64 * c0_0) + n) + 61)) + 96 - 1) / 96)) : (((64 * c0_0) + n) + 61) / 96) ? ((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256)) as long : (((((64 * c0_0) + n) + 61) * 96 < 0 ? (96 < 0 ?  -(( -((((64 * c0_0) + n) + 61)) + 96 + 1) / 96) :  -(( -((((64 * c0_0) + n) + 61)) + 96 - 1) / 96)) : (((64 * c0_0) + n) + 61) / 96)) as long)) as long : (c0_0) as long),(var c1 : long) => {
                        var c3 : long;
                        var c4 : long;
                        var c5 : long;
                        var c2 : long;
                        for (c2 = (((((256 * c1) + (-1 * n)) + -28) * 256 < 0 ?  -( -((((256 * c1) + (-1 * n)) + -28)) / 256) : (256 < 0 ? ( -((((256 * c1) + (-1 * n)) + -28)) +  -(256) - 1) /  -(256) : ((((256 * c1) + (-1 * n)) + -28) + 256 - 1) / 256)) > ((2 * c0_0) + (-2 * c1)) ? (((((256 * c1) + (-1 * n)) + -28) * 256 < 0 ?  -( -((((256 * c1) + (-1 * n)) + -28)) / 256) : (256 < 0 ? ( -((((256 * c1) + (-1 * n)) + -28)) +  -(256) - 1) /  -(256) : ((((256 * c1) + (-1 * n)) + -28) + 256 - 1) / 256))) as long : (((2 * c0_0) + (-2 * c1))) as long); (c2 <= ((((((256 * c1) + n) + 28) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c1) + n) + 28)) + 256 + 1) / 256) :  -(( -((((256 * c1) + n) + 28)) + 256 - 1) / 256)) : (((256 * c1) + n) + 28) / 256) < (((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256) ? (((((256 * c1) + n) + 28) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c1) + n) + 28)) + 256 + 1) / 256) :  -(( -((((256 * c1) + n) + 28)) + 256 - 1) / 256)) : (((256 * c1) + n) + 28) / 256)) as long : ((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256)) as long) < (((((64 * c0_0) + (-64 * c1)) + n) + 61) * 256 < 0 ? (256 < 0 ?  -(( -(((((64 * c0_0) + (-64 * c1)) + n) + 61)) + 256 + 1) / 256) :  -(( -(((((64 * c0_0) + (-64 * c1)) + n) + 61)) + 256 - 1) / 256)) : ((((64 * c0_0) + (-64 * c1)) + n) + 61) / 256) ? ((((((256 * c1) + n) + 28) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c1) + n) + 28)) + 256 + 1) / 256) :  -(( -((((256 * c1) + n) + 28)) + 256 - 1) / 256)) : (((256 * c1) + n) + 28) / 256) < (((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256) ? (((((256 * c1) + n) + 28) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c1) + n) + 28)) + 256 + 1) / 256) :  -(( -((((256 * c1) + n) + 28)) + 256 - 1) / 256)) : (((256 * c1) + n) + 28) / 256)) as long : ((((n + (2 * tsteps)) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -3)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -3)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -3) / 256)) as long)) as long : ((((((64 * c0_0) + (-64 * c1)) + n) + 61) * 256 < 0 ? (256 < 0 ?  -(( -(((((64 * c0_0) + (-64 * c1)) + n) + 61)) + 256 + 1) / 256) :  -(( -(((((64 * c0_0) + (-64 * c1)) + n) + 61)) + 256 - 1) / 256)) : ((((64 * c0_0) + (-64 * c1)) + n) + 61) / 256)) as long)); c2++) {
                            if (((c0_0 <= (((((64 * c1) + (256 * c2)) + (-1 * n)) + 1) * 64 < 0 ? (64 < 0 ?  -(( -(((((64 * c1) + (256 * c2)) + (-1 * n)) + 1)) + 64 + 1) / 64) :  -(( -(((((64 * c1) + (256 * c2)) + (-1 * n)) + 1)) + 64 - 1) / 64)) : ((((64 * c1) + (256 * c2)) + (-1 * n)) + 1) / 64)) && (c1 <= (c2 + -1)))) {
                                if ((((n + 1) % 2) == 0)) {
                                    for (c4 = ((256 * c1) > (((256 * c2) + (-1 * n)) + 3) ? ((256 * c1)) as long : ((((256 * c2) + (-1 * n)) + 3)) as long); (c4 <= ((256 * c1) + 255)); c4++) {
                                        A(((((-256 * c2) + c4) + n) + -2),(n + -2)) = B(((((-256 * c2) + c4) + n) + -2),(n + -2));
                                    }
                                }
                            }
                            if (((c0_0 <= ((((96 * c1) + (-1 * n)) + 1) * 64 < 0 ? (64 < 0 ?  -(( -((((96 * c1) + (-1 * n)) + 1)) + 64 + 1) / 64) :  -(( -((((96 * c1) + (-1 * n)) + 1)) + 64 - 1) / 64)) : (((96 * c1) + (-1 * n)) + 1) / 64)) && (c1 >= c2))) {
                                if ((((n + 1) % 2) == 0)) {
                                    for (c5 = ((256 * c2) > (((256 * c1) + (-1 * n)) + 3) ? ((256 * c2)) as long : ((((256 * c1) + (-1 * n)) + 3)) as long); (c5 <= ((256 * c1) < ((256 * c2) + 255) ? ((256 * c1)) as long : (((256 * c2) + 255)) as long)); c5++) {
                                        A((n + -2),((((-256 * c1) + c5) + n) + -2)) = B((n + -2),((((-256 * c1) + c5) + n) + -2));
                                    }
                                }
                            }
                            for (c3 = ((((((256 * c1) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c1) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c1) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c1) + (-1 * n)) + 2) + 2 - 1) / 2)) > ((((256 * c2) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c2) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c2) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c2) + (-1 * n)) + 2) + 2 - 1) / 2)) ? (((((256 * c1) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c1) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c1) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c1) + (-1 * n)) + 2) + 2 - 1) / 2))) as long : (((((256 * c2) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c2) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c2) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c2) + (-1 * n)) + 2) + 2 - 1) / 2))) as long) > ((256 * c0_0) + (-256 * c1)) ? ((((((256 * c1) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c1) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c1) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c1) + (-1 * n)) + 2) + 2 - 1) / 2)) > ((((256 * c2) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c2) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c2) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c2) + (-1 * n)) + 2) + 2 - 1) / 2)) ? (((((256 * c1) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c1) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c1) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c1) + (-1 * n)) + 2) + 2 - 1) / 2))) as long : (((((256 * c2) + (-1 * n)) + 2) * 2 < 0 ?  -( -((((256 * c2) + (-1 * n)) + 2)) / 2) : (2 < 0 ? ( -((((256 * c2) + (-1 * n)) + 2)) +  -(2) - 1) /  -(2) : ((((256 * c2) + (-1 * n)) + 2) + 2 - 1) / 2))) as long)) as long : (((256 * c0_0) + (-256 * c1))) as long); (c3 <= (((((16 * c1) + 14) < ((16 * c2) + 14) ? (((16 * c1) + 14)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((16 * c1) + 14) < ((16 * c2) + 14) ? (((16 * c1) + 14)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long) < (((256 * c0_0) + (-256 * c1)) + 255) ? (((((16 * c1) + 14) < ((16 * c2) + 14) ? (((16 * c1) + 14)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((16 * c1) + 14) < ((16 * c2) + 14) ? (((16 * c1) + 14)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long)) as long : ((((256 * c0_0) + (-256 * c1)) + 255)) as long)); c3++) {
                                if ((c1 <= (c3 * 16 < 0 ? (16 < 0 ?  -(( -(c3) + 16 + 1) / 16) :  -(( -(c3) + 16 - 1) / 16)) : c3 / 16))) {
                                    for (c5 = ((256 * c2) > ((2 * c3) + 1) ? ((256 * c2)) as long : (((2 * c3) + 1)) as long); (c5 <= (((256 * c2) + 255) < (((2 * c3) + n) + -2) ? (((256 * c2) + 255)) as long : ((((2 * c3) + n) + -2)) as long)); c5++) {
                                        B(1,((-2 * c3) + c5)) = 0.2 * (A(1,((-2 * c3) + c5)) + A(1,((-2 * c3) + c5) - 1L) + A(1,1L + ((-2 * c3) + c5)) + A(1L + 1,((-2 * c3) + c5)) + A(1 - 1L,((-2 * c3) + c5)));
                                    }
                                }
                                for (c4 = ((256 * c1) > ((2 * c3) + 2) ? ((256 * c1)) as long : (((2 * c3) + 2)) as long); (c4 <= (((256 * c1) + 255) < (((2 * c3) + n) + -2) ? (((256 * c1) + 255)) as long : ((((2 * c3) + n) + -2)) as long)); c4++) {
                                    if ((c2 <= (c3 * 16 < 0 ? (16 < 0 ?  -(( -(c3) + 16 + 1) / 16) :  -(( -(c3) + 16 - 1) / 16)) : c3 / 16))) {
                                        B(((-2 * c3) + c4),1) = 0.2 * (A(((-2 * c3) + c4),1) + A(((-2 * c3) + c4),1 - 1L) + A(((-2 * c3) + c4),1L + 1) + A(1L + ((-2 * c3) + c4),1) + A(((-2 * c3) + c4) - 1L,1));
                                    }
                                    for (c5 = ((256 * c2) > ((2 * c3) + 2) ? ((256 * c2)) as long : (((2 * c3) + 2)) as long); (c5 <= (((256 * c2) + 255) < (((2 * c3) + n) + -2) ? (((256 * c2) + 255)) as long : ((((2 * c3) + n) + -2)) as long)); c5++) {
                                        B(((-2 * c3) + c4),((-2 * c3) + c5)) = 0.2 * (A(((-2 * c3) + c4),((-2 * c3) + c5)) + A(((-2 * c3) + c4),((-2 * c3) + c5) - 1L) + A(((-2 * c3) + c4),1L + ((-2 * c3) + c5)) + A(1L + ((-2 * c3) + c4),((-2 * c3) + c5)) + A(((-2 * c3) + c4) - 1L,((-2 * c3) + c5)));
                                        A((((-2 * c3) + c4) + -1),(((-2 * c3) + c5) + -1)) = B((((-2 * c3) + c4) + -1),(((-2 * c3) + c5) + -1));
                                    }
                                    if ((c2 >= ((((2 * c3) + n) + -256) * 256 < 0 ?  -( -((((2 * c3) + n) + -256)) / 256) : (256 < 0 ? ( -((((2 * c3) + n) + -256)) +  -(256) - 1) /  -(256) : ((((2 * c3) + n) + -256) + 256 - 1) / 256)))) {
                                        A((((-2 * c3) + c4) + -1),(n + -2)) = B((((-2 * c3) + c4) + -1),(n + -2));
                                    }
                                }
                                if ((c1 >= ((((2 * c3) + n) + -256) * 256 < 0 ?  -( -((((2 * c3) + n) + -256)) / 256) : (256 < 0 ? ( -((((2 * c3) + n) + -256)) +  -(256) - 1) /  -(256) : ((((2 * c3) + n) + -256) + 256 - 1) / 256)))) {
                                    for (c5 = ((256 * c2) > ((2 * c3) + 2) ? ((256 * c2)) as long : (((2 * c3) + 2)) as long); (c5 <= (((256 * c2) + 255) < (((2 * c3) + n) + -1) ? (((256 * c2) + 255)) as long : ((((2 * c3) + n) + -1)) as long)); c5++) {
                                        A((n + -2),(((-2 * c3) + c5) + -1)) = B((n + -2),(((-2 * c3) + c5) + -1));
                                    }
                                }
                            }
                            if ((((c0_0 >= ((((2 * c1) + c2) + -1) * 2 < 0 ?  -( -((((2 * c1) + c2) + -1)) / 2) : (2 < 0 ? ( -((((2 * c1) + c2) + -1)) +  -(2) - 1) /  -(2) : ((((2 * c1) + c2) + -1) + 2 - 1) / 2))) && (c1 >= (c2 + 1))) && (c2 <= ((tsteps + -16) * 16 < 0 ? (16 < 0 ?  -(( -((tsteps + -16)) + 16 + 1) / 16) :  -(( -((tsteps + -16)) + 16 - 1) / 16)) : (tsteps + -16) / 16)))) {
                                for (c4 = (256 * c1); (c4 <= (((256 * c1) + 255) < (((256 * c2) + n) + 28) ? (((256 * c1) + 255)) as long : ((((256 * c2) + n) + 28)) as long)); c4++) {
                                    B((((-256 * c2) + c4) + -30),1) = 0.2 * (A((((-256 * c2) + c4) + -30),1) + A((((-256 * c2) + c4) + -30),1 - 1L) + A((((-256 * c2) + c4) + -30),1L + 1) + A(1L + (((-256 * c2) + c4) + -30),1) + A((((-256 * c2) + c4) + -30) - 1L,1));
                                }
                            }
                            if (((c0_0 >= (((3 * c1) + -1) * 2 < 0 ?  -( -(((3 * c1) + -1)) / 2) : (2 < 0 ? ( -(((3 * c1) + -1)) +  -(2) - 1) /  -(2) : (((3 * c1) + -1) + 2 - 1) / 2))) && (c1 <= (((tsteps + -16) * 16 < 0 ? (16 < 0 ?  -(( -((tsteps + -16)) + 16 + 1) / 16) :  -(( -((tsteps + -16)) + 16 - 1) / 16)) : (tsteps + -16) / 16) < c2 ? (((tsteps + -16) * 16 < 0 ? (16 < 0 ?  -(( -((tsteps + -16)) + 16 + 1) / 16) :  -(( -((tsteps + -16)) + 16 - 1) / 16)) : (tsteps + -16) / 16)) as long : (c2) as long)))) {
                                for (c5 = ((256 * c2) > ((256 * c1) + 255) ? ((256 * c2)) as long : (((256 * c1) + 255)) as long); (c5 <= (((256 * c2) + 255) < (((256 * c1) + n) + 28) ? (((256 * c2) + 255)) as long : ((((256 * c1) + n) + 28)) as long)); c5++) {
                                    B(1,(((-256 * c1) + c5) + -30)) = 0.2 * (A(1,(((-256 * c1) + c5) + -30)) + A(1,(((-256 * c1) + c5) + -30) - 1L) + A(1,1L + (((-256 * c1) + c5) + -30)) + A(1L + 1,(((-256 * c1) + c5) + -30)) + A(1 - 1L,(((-256 * c1) + c5) + -30)));
                                }
                            }
                        }
                    }
);
                }
            }
        }
    }  public static def main(args : Rail[String])
  {
    var TSTEPS : Long = 0;
    var N : Long = 0;
    
    @Ifdef("EXTRALARGE_DATASET") {
        TSTEPS = 100;
        N = 4000;
    }
    @Ifdef("STANDARD_DATASET") {
        TSTEPS = 20;
        N = 1000;
    }
    @Ifdef("MINI_DATASET") {
        TSTEPS = 2;
        N = 32;
    }
    @Ifdef("SMALL_DATASET") {
        TSTEPS = 10;
        N = 500;
    }
    @Ifdef("LARGE_DATASET") {
        TSTEPS = 20;
        N = 2000;
    }
    
    val jacobi_2d_imper = new Jacobi_2d_imper();
    /* Retrieve problem size. */
    var n  : Long= N;
    var tsteps  : Long= TSTEPS;
  
    jacobi_2d_imper.setPBs(tsteps, n);
    /* Variable declaration/allocation. */
    val A = new Array_2[Double](n,n);

    val B = new Array_2[Double](n,n);  
    /* Initialize array(s). */
    jacobi_2d_imper.init_array (n, A, B);
  
    /* Start timer. */
    val t1 = System.currentTimeMillis();
  
    /* Run kernel. */
    jacobi_2d_imper.kernel_jacobi_2d_imper (tsteps, n, A, B);
  
    /* Stop and prvar timer : Long. */
    val t2 = System.currentTimeMillis();
    Console.OUT.printf("Elapsed time= " + (t2 - t1) + " (ms)");
    // jacobi_2d_imper.print_array(n, A);
  
    /* Prevent dead-code elimination. All live-out data must be printed
       by the function call in argument. */
  
    /* Be clean. */
  
  }
}
