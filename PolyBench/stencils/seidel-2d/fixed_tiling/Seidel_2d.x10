/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2015.
 * 
 *
 *  @author HUANG RUOCHEN (hrc706@gmail.com)
 */

import x10.compiler.Ifdef;
import x10.array.Array_2;
import x10.array.Array_3;
import x10.compiler.Foreach;
public class Seidel_2d {
  var _PB_N : Long;
  var _PB_TSTEPS : Long;

  def init_array (n : Long, A : Array_2[Double]) {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++) {
        A(i,j) = ((i as Double) * (j+2) + 2) / n;
      }
  }

  def print_array(n : Long, A : Array_2[Double]) {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++) {
        Console.ERR.printf("%0.2lf ", A(i,j));
        if ((i * n + j) % 20 == 0) Console.ERR.printf("\n");
      }
    Console.ERR.printf("\n");
  }

    def kernel_seidel_2d(tsteps : long, n : long, A : Array_2[double])  {
        var c2 : long;
        var c3 : long;
        var c4 : long;
        var c5 : long;
        var c1 : long;
        var c0 : long;
        if (((n >= 3) && (tsteps >= 1))) {
            for (c0 = 0; (c0 <= (((n + (2 * tsteps)) + -4) * 256 < 0 ? (256 < 0 ?  -(( -(((n + (2 * tsteps)) + -4)) + 256 + 1) / 256) :  -(( -(((n + (2 * tsteps)) + -4)) + 256 - 1) / 256)) : ((n + (2 * tsteps)) + -4) / 256)); c0++) {
                {
                    val c0_0 = c0;
                    Foreach.block(((c0_0 * 2 < 0 ?  -( -(c0_0) / 2) : (2 < 0 ? ( -(c0_0) +  -(2) - 1) /  -(2) : (c0_0 + 2 - 1) / 2)) > ((((256 * c0_0) + (-1 * tsteps)) + 1) * 256 < 0 ?  -( -((((256 * c0_0) + (-1 * tsteps)) + 1)) / 256) : (256 < 0 ? ( -((((256 * c0_0) + (-1 * tsteps)) + 1)) +  -(256) - 1) /  -(256) : ((((256 * c0_0) + (-1 * tsteps)) + 1) + 256 - 1) / 256)) ? ((c0_0 * 2 < 0 ?  -( -(c0_0) / 2) : (2 < 0 ? ( -(c0_0) +  -(2) - 1) /  -(2) : (c0_0 + 2 - 1) / 2))) as long : (((((256 * c0_0) + (-1 * tsteps)) + 1) * 256 < 0 ?  -( -((((256 * c0_0) + (-1 * tsteps)) + 1)) / 256) : (256 < 0 ? ( -((((256 * c0_0) + (-1 * tsteps)) + 1)) +  -(256) - 1) /  -(256) : ((((256 * c0_0) + (-1 * tsteps)) + 1) + 256 - 1) / 256))) as long),(((((n + tsteps) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + tsteps) + -3)) + 256 + 1) / 256) :  -(( -(((n + tsteps) + -3)) + 256 - 1) / 256)) : ((n + tsteps) + -3) / 256) < ((((256 * c0_0) + n) + 29) * 64 < 0 ? (64 < 0 ?  -(( -((((256 * c0_0) + n) + 29)) + 64 + 1) / 64) :  -(( -((((256 * c0_0) + n) + 29)) + 64 - 1) / 64)) : (((256 * c0_0) + n) + 29) / 64) ? ((((n + tsteps) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + tsteps) + -3)) + 256 + 1) / 256) :  -(( -(((n + tsteps) + -3)) + 256 - 1) / 256)) : ((n + tsteps) + -3) / 256)) as long : (((((256 * c0_0) + n) + 29) * 64 < 0 ? (64 < 0 ?  -(( -((((256 * c0_0) + n) + 29)) + 64 + 1) / 64) :  -(( -((((256 * c0_0) + n) + 29)) + 64 - 1) / 64)) : (((256 * c0_0) + n) + 29) / 64)) as long) < c0_0 ? (((((n + tsteps) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + tsteps) + -3)) + 256 + 1) / 256) :  -(( -(((n + tsteps) + -3)) + 256 - 1) / 256)) : ((n + tsteps) + -3) / 256) < ((((256 * c0_0) + n) + 29) * 64 < 0 ? (64 < 0 ?  -(( -((((256 * c0_0) + n) + 29)) + 64 + 1) / 64) :  -(( -((((256 * c0_0) + n) + 29)) + 64 - 1) / 64)) : (((256 * c0_0) + n) + 29) / 64) ? ((((n + tsteps) + -3) * 256 < 0 ? (256 < 0 ?  -(( -(((n + tsteps) + -3)) + 256 + 1) / 256) :  -(( -(((n + tsteps) + -3)) + 256 - 1) / 256)) : ((n + tsteps) + -3) / 256)) as long : (((((256 * c0_0) + n) + 29) * 64 < 0 ? (64 < 0 ?  -(( -((((256 * c0_0) + n) + 29)) + 64 + 1) / 64) :  -(( -((((256 * c0_0) + n) + 29)) + 64 - 1) / 64)) : (((256 * c0_0) + n) + 29) / 64)) as long)) as long : (c0_0) as long),(var c1 : long) => {
                        var c2 : long;
                        var c3 : long;
                        var c4 : long;
                        var c5 : long;
                        for (c2 = (((((64 * c1) + (-1 * n)) + -28) * 256 < 0 ?  -( -((((64 * c1) + (-1 * n)) + -28)) / 256) : (256 < 0 ? ( -((((64 * c1) + (-1 * n)) + -28)) +  -(256) - 1) /  -(256) : ((((64 * c1) + (-1 * n)) + -28) + 256 - 1) / 256)) > c0_0 ? (((((64 * c1) + (-1 * n)) + -28) * 256 < 0 ?  -( -((((64 * c1) + (-1 * n)) + -28)) / 256) : (256 < 0 ? ( -((((64 * c1) + (-1 * n)) + -28)) +  -(256) - 1) /  -(256) : ((((64 * c1) + (-1 * n)) + -28) + 256 - 1) / 256))) as long : (c0_0) as long); (c2 <= (((((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long) < ((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256) ? (((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long)) as long : (((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256)) as long) < ((((64 * c1) + n) + 59) * 256 < 0 ? (256 < 0 ?  -(( -((((64 * c1) + n) + 59)) + 256 + 1) / 256) :  -(( -((((64 * c1) + n) + 59)) + 256 - 1) / 256)) : (((64 * c1) + n) + 59) / 256) ? ((((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long) < ((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256) ? (((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long)) as long : (((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256)) as long)) as long : (((((64 * c1) + n) + 59) * 256 < 0 ? (256 < 0 ?  -(( -((((64 * c1) + n) + 59)) + 256 + 1) / 256) :  -(( -((((64 * c1) + n) + 59)) + 256 - 1) / 256)) : (((64 * c1) + n) + 59) / 256)) as long) < (((((256 * c1) + n) + tsteps) + 28) * 256 < 0 ? (256 < 0 ?  -(( -(((((256 * c1) + n) + tsteps) + 28)) + 256 + 1) / 256) :  -(( -(((((256 * c1) + n) + tsteps) + 28)) + 256 - 1) / 256)) : ((((256 * c1) + n) + tsteps) + 28) / 256) ? (((((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long) < ((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256) ? (((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long)) as long : (((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256)) as long) < ((((64 * c1) + n) + 59) * 256 < 0 ? (256 < 0 ?  -(( -((((64 * c1) + n) + 59)) + 256 + 1) / 256) :  -(( -((((64 * c1) + n) + 59)) + 256 - 1) / 256)) : (((64 * c1) + n) + 59) / 256) ? ((((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long) < ((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256) ? (((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16) < (((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16) ? ((((n + tsteps) + -3) * 16 < 0 ? (16 < 0 ?  -(( -(((n + tsteps) + -3)) + 16 + 1) / 16) :  -(( -(((n + tsteps) + -3)) + 16 - 1) / 16)) : ((n + tsteps) + -3) / 16)) as long : ((((((256 * c0_0) + (-256 * c1)) + n) + 29) * 16 < 0 ? (16 < 0 ?  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 + 1) / 16) :  -(( -(((((256 * c0_0) + (-256 * c1)) + n) + 29)) + 16 - 1) / 16)) : ((((256 * c0_0) + (-256 * c1)) + n) + 29) / 16)) as long)) as long : (((((256 * c0_0) + n) + 60) * 256 < 0 ? (256 < 0 ?  -(( -((((256 * c0_0) + n) + 60)) + 256 + 1) / 256) :  -(( -((((256 * c0_0) + n) + 60)) + 256 - 1) / 256)) : (((256 * c0_0) + n) + 60) / 256)) as long)) as long : (((((64 * c1) + n) + 59) * 256 < 0 ? (256 < 0 ?  -(( -((((64 * c1) + n) + 59)) + 256 + 1) / 256) :  -(( -((((64 * c1) + n) + 59)) + 256 - 1) / 256)) : (((64 * c1) + n) + 59) / 256)) as long)) as long : ((((((256 * c1) + n) + tsteps) + 28) * 256 < 0 ? (256 < 0 ?  -(( -(((((256 * c1) + n) + tsteps) + 28)) + 256 + 1) / 256) :  -(( -(((((256 * c1) + n) + tsteps) + 28)) + 256 - 1) / 256)) : ((((256 * c1) + n) + tsteps) + 28) / 256)) as long)); c2++) {
                            for (c3 = (((((256 * c0_0) + (-256 * c1)) > (((256 * c1) + (-1 * n)) + 2) ? (((256 * c0_0) + (-256 * c1))) as long : ((((256 * c1) + (-1 * n)) + 2)) as long) > (((16 * c2) + (-1 * n)) + 2) ? ((((256 * c0_0) + (-256 * c1)) > (((256 * c1) + (-1 * n)) + 2) ? (((256 * c0_0) + (-256 * c1))) as long : ((((256 * c1) + (-1 * n)) + 2)) as long)) as long : ((((16 * c2) + (-1 * n)) + 2)) as long) > ((((-256 * c1) + (256 * c2)) + (-1 * n)) + -29) ? (((((256 * c0_0) + (-256 * c1)) > (((256 * c1) + (-1 * n)) + 2) ? (((256 * c0_0) + (-256 * c1))) as long : ((((256 * c1) + (-1 * n)) + 2)) as long) > (((16 * c2) + (-1 * n)) + 2) ? ((((256 * c0_0) + (-256 * c1)) > (((256 * c1) + (-1 * n)) + 2) ? (((256 * c0_0) + (-256 * c1))) as long : ((((256 * c1) + (-1 * n)) + 2)) as long)) as long : ((((16 * c2) + (-1 * n)) + 2)) as long)) as long : (((((-256 * c1) + (256 * c2)) + (-1 * n)) + -29)) as long); (c3 <= ((((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long) < (((256 * c0_0) + (-256 * c1)) + 255) ? (((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long)) as long : ((((256 * c0_0) + (-256 * c1)) + 255)) as long) < (((-256 * c1) + (256 * c2)) + 30) ? ((((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long) < (((256 * c0_0) + (-256 * c1)) + 255) ? (((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long) < (tsteps + -1) ? ((((256 * c1) + 30) < ((16 * c2) + 14) ? (((256 * c1) + 30)) as long : (((16 * c2) + 14)) as long)) as long : ((tsteps + -1)) as long)) as long : ((((256 * c0_0) + (-256 * c1)) + 255)) as long)) as long : ((((-256 * c1) + (256 * c2)) + 30)) as long)); c3++) {
                                for (c4 = (((256 * c1) > (c3 + 1) ? ((256 * c1)) as long : ((c3 + 1)) as long) > ((((256 * c2) + (-1 * c3)) + (-1 * n)) + 2) ? (((256 * c1) > (c3 + 1) ? ((256 * c1)) as long : ((c3 + 1)) as long)) as long : (((((256 * c2) + (-1 * c3)) + (-1 * n)) + 2)) as long); (c4 <= ((((256 * c1) + 255) < (((256 * c2) + (-1 * c3)) + 30) ? (((256 * c1) + 255)) as long : ((((256 * c2) + (-1 * c3)) + 30)) as long) < ((c3 + n) + -2) ? ((((256 * c1) + 255) < (((256 * c2) + (-1 * c3)) + 30) ? (((256 * c1) + 255)) as long : ((((256 * c2) + (-1 * c3)) + 30)) as long)) as long : (((c3 + n) + -2)) as long)); c4++) {
                                    for (c5 = ((256 * c2) > ((c3 + c4) + 1) ? ((256 * c2)) as long : (((c3 + c4) + 1)) as long); (c5 <= (((256 * c2) + 255) < (((c3 + c4) + n) + -2) ? (((256 * c2) + 255)) as long : ((((c3 + c4) + n) + -2)) as long)); c5++) {
                                        A(((-1 * c3) + c4),(((-1 * c3) + (-1 * c4)) + c5)) = (A(((-1 * c3) + c4) - 1L,(((-1 * c3) + (-1 * c4)) + c5) - 1L) + A(((-1 * c3) + c4) - 1L,(((-1 * c3) + (-1 * c4)) + c5)) + A(((-1 * c3) + c4) - 1L,(((-1 * c3) + (-1 * c4)) + c5) + 1L) + A(((-1 * c3) + c4),(((-1 * c3) + (-1 * c4)) + c5) - 1L) + A(((-1 * c3) + c4),(((-1 * c3) + (-1 * c4)) + c5)) + A(((-1 * c3) + c4),(((-1 * c3) + (-1 * c4)) + c5) + 1L) + A(((-1 * c3) + c4) + 1L,(((-1 * c3) + (-1 * c4)) + c5) - 1L) + A(((-1 * c3) + c4) + 1L,(((-1 * c3) + (-1 * c4)) + c5)) + A(((-1 * c3) + c4) + 1L,(((-1 * c3) + (-1 * c4)) + c5) + 1L)) / 9.0;
                                    }
                                }
                            }
                        }
                    }
);
                }
            }
        }
    }

  def setPBs(n : Long, tsteps : Long) {
    _PB_N = n;
    _PB_TSTEPS = tsteps;
  }

  public static def main(args : Rail[String]) {
    var N : Long = 0;
    var TSTEPS : Long = 0;

    @Ifdef("MINI_DATASET") {
        TSTEPS = 2;
        N = 32;
    }
    @Ifdef("SMALL_DATASET") {
        TSTEPS = 10;
        N = 500;
    }
    @Ifdef("STANDARD_DATASET") {
        TSTEPS = 20;
        N = 1000;
    }
    @Ifdef("LARGE_DATASET") {
        TSTEPS = 20;
        N = 2000;
    }
    @Ifdef("EXTRALARGE_DATASET") {
        TSTEPS = 100;
        N = 4000;
    }

    val seidel_2d = new Seidel_2d();

    var n : Long = N;
    var tsteps : Long = TSTEPS;
    seidel_2d.setPBs(n, tsteps);

    val A = new Array_2[Double](n,n);
    seidel_2d.init_array(n, A);

    val t1 = System.currentTimeMillis();

    seidel_2d.kernel_seidel_2d(tsteps, n, A);

    val t2 = System.currentTimeMillis();

    Console.OUT.printf("Elapsed time= " + (t2 - t1) + " (ms)\n");
//     seidel_2d.print_array(n, A);
  }
}
