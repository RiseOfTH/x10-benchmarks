/*
 *  This file is part of the X10 project (http://x10-lang.org).
 *
 *  This file is licensed to You under the Eclipse Public License (EPL);
 *  You may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *      http://www.opensource.org/licenses/eclipse-1.0.php
 *
 *  (C) Copyright IBM Corporation 2015.
 * 
 *
 *  @author HUANG RUOCHEN (hrc706@gmail.com)
 */

import x10.compiler.Ifdef;
import x10.array.Array_2;
import x10.array.Array_3;
import x10.compiler.Foreach;
public class Seidel_2d {
  var _PB_N : Long;
  var _PB_TSTEPS : Long;

  def init_array (n : Long, A : Array_2[Double]) {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++) {
        A(i,j) = ((i as Double) * (j+2) + 2) / n;
      }
  }

  def print_array(n : Long, A : Array_2[Double]) {
    for (var i : Long = 0; i < n; i++)
      for (var j : Long = 0; j < n; j++) {
        Console.ERR.printf("%0.2lf ", A(i,j));
        if ((i * n + j) % 20 == 0) Console.ERR.printf("\n");
      }
    Console.ERR.printf("\n");
  }

    def kernel_seidel_2d(tsteps : long, n : long, A : Array_2[double])  {
        var ___pace_tile_sizes : Rail[long] = new Rail[Long](3L);
        Pace_tiling_api.PACETileSizeVectorInit(___pace_tile_sizes,3,2);
        var wPTile : long;
        var c2t1 : long;
        var c1t1 : long;
        var c0t1 : long;
        var T1c1 : float = (___pace_tile_sizes(2L)) as float;
        var T1c0 : float = (___pace_tile_sizes(0L)) as float;
        var T1c2 : float = (___pace_tile_sizes(1L)) as float;
        var c0 : long;
        var c2 : long;
        var c1 : long;
        if (((n >= 3) && (tsteps >= 1))) {
            for (wPTile = (Math.round(((((((((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / ((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1))) * -1) + ((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / (((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2))) * 2)) + ((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / ((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2))) * -1)) + ((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / (((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2))) * 2)) + (((((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) / (((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2))) * -1)) + ((((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) / ((((T1c0 * T1c1) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c1) * T1c2))))) as double)) as long; (wPTile <= (Math.round((((((((((n * ((((((((((((((((((((((((((((((((((((((((((((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) + ((((T1c1 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) / ((((((((((((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) * T1c2) + (((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c1 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2) * T1c2)) + (((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1) * T1c2)))) + (tsteps * ((((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) / ((((T1c0 * T1c1) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c1) * T1c2))))) + ((((((((((((((((((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c1)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c1)) / (((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)))) + ((((((((((((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c1)) / (((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)))) + ((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / (((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c2) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2))) * -4)) + ((((((((((((((((((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c1)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c0) * T1c1) * T1c1) * T1c1)) / (((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)))) + ((((((((((((((((((((T1c1 * T1c2) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c2) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c2) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c1 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) + (((T1c0 * T1c1) * T1c1) * T1c2)) + (((T1c0 * T1c1) * T1c1) * T1c1)) / (((((((((((T1c1 * T1c1) * T1c2) * T1c2) * T1c2) + ((((T1c1 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2)) + ((((T1c0 * T1c1) * T1c2) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c2) * T1c2)) + ((((T1c0 * T1c1) * T1c1) * T1c1) * T1c2))) * -3)) + (((((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) / ((((T1c0 * T1c1) * T1c2) * T1c2) + (((T1c0 * T1c1) * T1c1) * T1c2))) * -1))) as double)) as long); ++wPTile) {
                {
                    var tmpLb : long;
                    var tmpUb : long;
                    tmpLb = ((Math.round(((((((((wPTile * ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((n * (((((((T1c1 * T1c2) + (T1c1 * T1c1)) + (T1c2 * T1c2)) + (T1c1 * T1c2)) + (T1c1 * T1c2)) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) * -1)) + (((((T1c0 * T1c1) * T1c2) + ((T1c0 * T1c1) * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -1)) + (((((T1c1 * T1c1) * T1c2) + ((T1c1 * T1c1) * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -1)) + ((((T1c1 * T1c2) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * 4)) + ((((T1c0 * T1c2) + (T1c0 * T1c1)) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * -1)) + (((T1c2 + T1c1) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * 3))) as double)) as long > (Math.round(((-1 + (1 / T1c0))) as double)) as long ? ((Math.round(((((((((wPTile * ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((n * (((((((T1c1 * T1c2) + (T1c1 * T1c1)) + (T1c2 * T1c2)) + (T1c1 * T1c2)) + (T1c1 * T1c2)) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) * -1)) + (((((T1c0 * T1c1) * T1c2) + ((T1c0 * T1c1) * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -1)) + (((((T1c1 * T1c1) * T1c2) + ((T1c1 * T1c1) * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -1)) + ((((T1c1 * T1c2) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * 4)) + ((((T1c0 * T1c2) + (T1c0 * T1c1)) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * -1)) + (((T1c2 + T1c1) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * 3))) as double)) as long) as long : ((Math.round(((-1 + (1 / T1c0))) as double)) as long) as long);
                    tmpUb = ((Math.round(((((((wPTile * ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((((T1c1 * T1c2) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -2)) + (((T1c1 * T1c2) + (T1c1 * T1c1)) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1)))) + (((T1c2 + T1c1) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * -2))) as double)) as long < (Math.round((((tsteps * (1 / T1c0)) + ((1 / T1c0) * -1))) as double)) as long ? ((Math.round(((((((wPTile * ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((((T1c1 * T1c2) * T1c2) + ((T1c1 * T1c1) * T1c2)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)))) + ((((T1c1 * T1c2) + (T1c1 * T1c1)) / (((((((((T1c1 * T1c2) * T1c2) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c2) * T1c2)) + ((T1c0 * T1c1) * T1c2)) + ((T1c1 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1)) + ((T1c0 * T1c1) * T1c2)) + ((T1c0 * T1c1) * T1c1))) * -2)) + (((T1c1 * T1c2) + (T1c1 * T1c1)) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1)))) + (((T1c2 + T1c1) / ((((T1c1 * T1c2) + (T1c0 * T1c1)) + (T1c0 * T1c2)) + (T1c0 * T1c1))) * -2))) as double)) as long) as long : ((Math.round((((tsteps * (1 / T1c0)) + ((1 / T1c0) * -1))) as double)) as long) as long);
                    {
                        val T1c0_5 = T1c0;
                        val T1c1_4 = T1c1;
                        val T1c2_3 = T1c2;
                        val wPTile_2 = wPTile;
                        val tmpUb_1 = tmpUb;
                        val tmpLb_0 = tmpLb;
                        Foreach.block(tmpLb_0,tmpUb_1,(var c0t1 : long) => {
                            var c2t1 : long;
                            var c1t1 : long;
                            var c0 : long;
                            var c2 : long;
                            var c1 : long;
                            for (c1t1 = ((Math.round((((((((wPTile_2 * (T1c2_3 / (T1c2_3 + T1c1_4))) + ((c0t1 * ((T1c2_3 + T1c0_5) / (T1c2_3 + T1c1_4))) * -1)) + ((n * (1 / (T1c2_3 + T1c1_4))) * -1)) + ((T1c0_5 / (T1c2_3 + T1c1_4)) * -1)) + ((T1c1_4 / (T1c2_3 + T1c1_4)) * -1)) + ((1 / (T1c2_3 + T1c1_4)) * 4))) as double)) as long > (Math.round(((((c0t1 * (T1c0_5 / T1c1_4)) + -1) + ((1 / T1c1_4) * 2))) as double)) as long ? ((Math.round((((((((wPTile_2 * (T1c2_3 / (T1c2_3 + T1c1_4))) + ((c0t1 * ((T1c2_3 + T1c0_5) / (T1c2_3 + T1c1_4))) * -1)) + ((n * (1 / (T1c2_3 + T1c1_4))) * -1)) + ((T1c0_5 / (T1c2_3 + T1c1_4)) * -1)) + ((T1c1_4 / (T1c2_3 + T1c1_4)) * -1)) + ((1 / (T1c2_3 + T1c1_4)) * 4))) as double)) as long) as long : ((Math.round(((((c0t1 * (T1c0_5 / T1c1_4)) + -1) + ((1 / T1c1_4) * 2))) as double)) as long) as long); (c1t1 <= ((Math.round((((((wPTile_2 * (T1c2_3 / (T1c2_3 + T1c1_4))) + (c0t1 * (((T1c2_3 * -1) + (T1c0_5 * -1)) / (T1c2_3 + T1c1_4)))) + (T1c2_3 / (T1c2_3 + T1c1_4))) + ((1 / (T1c2_3 + T1c1_4)) * -2))) as double)) as long < (Math.round((((((c0t1 * (T1c0_5 / T1c1_4)) + (n * (1 / T1c1_4))) + (T1c0_5 / T1c1_4)) + ((1 / T1c1_4) * -3))) as double)) as long ? ((Math.round((((((wPTile_2 * (T1c2_3 / (T1c2_3 + T1c1_4))) + (c0t1 * (((T1c2_3 * -1) + (T1c0_5 * -1)) / (T1c2_3 + T1c1_4)))) + (T1c2_3 / (T1c2_3 + T1c1_4))) + ((1 / (T1c2_3 + T1c1_4)) * -2))) as double)) as long) as long : ((Math.round((((((c0t1 * (T1c0_5 / T1c1_4)) + (n * (1 / T1c1_4))) + (T1c0_5 / T1c1_4)) + ((1 / T1c1_4) * -3))) as double)) as long) as long)); ++c1t1) {
                                for (c2t1 = ((Math.round((((wPTile_2 + (c0t1 * -1)) + (c1t1 * -1))) as double)) as long > (Math.round((((((c0t1 * (T1c0_5 / T1c2_3)) + (c1t1 * (T1c1_4 / T1c2_3))) + -1) + ((1 / T1c2_3) * 2))) as double)) as long ? ((Math.round((((wPTile_2 + (c0t1 * -1)) + (c1t1 * -1))) as double)) as long) as long : ((Math.round((((((c0t1 * (T1c0_5 / T1c2_3)) + (c1t1 * (T1c1_4 / T1c2_3))) + -1) + ((1 / T1c2_3) * 2))) as double)) as long) as long); (c2t1 <= ((Math.round((((wPTile_2 + (c0t1 * -1)) + (c1t1 * -1))) as double)) as long < (Math.round((((((((c0t1 * (T1c0_5 / T1c2_3)) + (c1t1 * (T1c1_4 / T1c2_3))) + (n * (1 / T1c2_3))) + (T1c0_5 / T1c2_3)) + (T1c1_4 / T1c2_3)) + ((1 / T1c2_3) * -4))) as double)) as long ? ((Math.round((((wPTile_2 + (c0t1 * -1)) + (c1t1 * -1))) as double)) as long) as long : ((Math.round((((((((c0t1 * (T1c0_5 / T1c2_3)) + (c1t1 * (T1c1_4 / T1c2_3))) + (n * (1 / T1c2_3))) + (T1c0_5 / T1c2_3)) + (T1c1_4 / T1c2_3)) + ((1 / T1c2_3) * -4))) as double)) as long) as long)); ++c2t1) {
                                    for (c0 = ((c0t1 * T1c0_5) > 0 ? ((c0t1 * T1c0_5)) as long : (0) as long); (c0 <= (((c0t1 * T1c0_5) + (T1c0_5 + -1)) < (tsteps + -1) ? (((c0t1 * T1c0_5) + (T1c0_5 + -1))) as long : ((tsteps + -1)) as long)); c0++) {
                                        for (c1 = ((c1t1 * T1c1_4) > (c0 + 1) ? ((c1t1 * T1c1_4)) as long : ((c0 + 1)) as long); (c1 <= (((c1t1 * T1c1_4) + (T1c1_4 + -1)) < ((c0 + n) + -2) ? (((c1t1 * T1c1_4) + (T1c1_4 + -1))) as long : (((c0 + n) + -2)) as long)); c1++) {
                                            for (c2 = ((c2t1 * T1c2_3) > ((c0 + c1) + 1) ? ((c2t1 * T1c2_3)) as long : (((c0 + c1) + 1)) as long); (c2 <= (((c2t1 * T1c2_3) + (T1c2_3 + -1)) < (((c0 + c1) + n) + -2) ? (((c2t1 * T1c2_3) + (T1c2_3 + -1))) as long : ((((c0 + c1) + n) + -2)) as long)); c2++) {
                                                A(((-1 * c0) + c1),(((-1 * c0) + (-1 * c1)) + c2)) = (A(((-1 * c0) + c1) - 1L,(((-1 * c0) + (-1 * c1)) + c2) - 1L) + A(((-1 * c0) + c1) - 1L,(((-1 * c0) + (-1 * c1)) + c2)) + A(((-1 * c0) + c1) - 1L,(((-1 * c0) + (-1 * c1)) + c2) + 1L) + A(((-1 * c0) + c1),(((-1 * c0) + (-1 * c1)) + c2) - 1L) + A(((-1 * c0) + c1),(((-1 * c0) + (-1 * c1)) + c2)) + A(((-1 * c0) + c1),(((-1 * c0) + (-1 * c1)) + c2) + 1L) + A(((-1 * c0) + c1) + 1L,(((-1 * c0) + (-1 * c1)) + c2) - 1L) + A(((-1 * c0) + c1) + 1L,(((-1 * c0) + (-1 * c1)) + c2)) + A(((-1 * c0) + c1) + 1L,(((-1 * c0) + (-1 * c1)) + c2) + 1L)) / 9.0;
                                            }
                                        }
                                    }
                                }
                            }
                        }
);
                    }
                }
            }
        }
    }

  def setPBs(n : Long, tsteps : Long) {
    _PB_N = n;
    _PB_TSTEPS = tsteps;
  }

  public static def main(args : Rail[String]) {
    var N : Long = 0;
    var TSTEPS : Long = 0;

    @Ifdef("MINI_DATASET") {
        TSTEPS = 2;
        N = 32;
    }
    @Ifdef("SMALL_DATASET") {
        TSTEPS = 10;
        N = 500;
    }
    @Ifdef("STANDARD_DATASET") {
        TSTEPS = 20;
        N = 1000;
    }
    @Ifdef("LARGE_DATASET") {
        TSTEPS = 20;
        N = 2000;
    }
    @Ifdef("EXTRALARGE_DATASET") {
        TSTEPS = 100;
        N = 4000;
    }

    val seidel_2d = new Seidel_2d();

    var n : Long = N;
    var tsteps : Long = TSTEPS;
    seidel_2d.setPBs(n, tsteps);

    val A = new Array_2[Double](n,n);
    seidel_2d.init_array(n, A);

    val t1 = System.currentTimeMillis();

    seidel_2d.kernel_seidel_2d(tsteps, n, A);

    val t2 = System.currentTimeMillis();

    Console.OUT.printf("Elapsed time= " + (t2 - t1) + " (ms)\n");
//     seidel_2d.print_array(n, A);
  }
}
